{"version":3,"sources":["actions/actionTypes.js","actions/actionCreators.js","components/ServiceAdd.js","components/ServiceFilter.js","components/ServiceList.js","App.js","serviceWorker.js","reducers/serviceList.js","reducers/serviceAdd.js","reducers/serviceFilter.js","store/index.js","index.js"],"names":["ADD_SERVICE","EDIT_SERVICE","REMOVE_SERVICE","CHANGE_SERVICE_FIELD","CLEAR_SERVICE_FIELDS","SET_ERROR","FILTER_SERVICES","CHANGE_FILTER","clearServiceFields","type","setError","error","payload","changeFilter","filter","ServiceAdd","useSelector","state","serviceAdd","id","name","price","isEdit","dispatch","useDispatch","handleChange","evt","target","value","changeServiceField","onSubmit","preventDefault","isNaN","Number","addService","onReset","onChange","className","ServiceFilter","serviceFilter","useEffect","filterServices","ServiceList","items","serviceList","handleEdit","editService","handleRemove","removeService","isVisible","map","key","onClick","App","Boolean","window","location","hostname","match","initialState","nanoid","reducer","combineReducers","action","item","service","toLowerCase","includes","String","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d6df82d0.chunk.js","sourcesContent":["export const ADD_SERVICE = 'ADD_SERVICE';\nexport const EDIT_SERVICE = 'EDIT_SERVICE';\nexport const REMOVE_SERVICE = 'REMOVE_SERVICE';\nexport const CHANGE_SERVICE_FIELD = 'CHANGE_SERVICE_FIELD';\nexport const CLEAR_SERVICE_FIELDS = 'CLEAR_SERVICE_FIELDS';\nexport const SET_ERROR = 'SET_ERROR';\nexport const FILTER_SERVICES = 'FILTER_SERVICES';\nexport const CHANGE_FILTER = 'CHANGE_FILTER';\n","import { \n  ADD_SERVICE, \n  EDIT_SERVICE, \n  REMOVE_SERVICE, \n  CHANGE_SERVICE_FIELD, \n  CLEAR_SERVICE_FIELDS, \n  SET_ERROR,\n  FILTER_SERVICES,\n  CHANGE_FILTER\n} from './actionTypes';\n\nexport function addService(id, name, price) {\n  return { type: ADD_SERVICE, payload: { id, name, price } };\n}\n\nexport function editService(id, name, price) {\n  return { type: EDIT_SERVICE, payload: { id, name, price } };\n}\n\nexport function removeService(id) {\n  return { type: REMOVE_SERVICE, payload: { id } };\n}\n\nexport function changeServiceField(name, value) {\n  return { type: CHANGE_SERVICE_FIELD, payload: { name, value } };\n}\n\nexport function clearServiceFields() {\n  return { type: CLEAR_SERVICE_FIELDS };\n}\n\nexport function setError(error) {\n  return { type: SET_ERROR, payload: { error } };\n}\n\nexport function filterServices(filter) {\n  return { type: FILTER_SERVICES, payload: { filter } };\n}\n\nexport function changeFilter(filter) {\n  return { type: CHANGE_FILTER, payload: { filter } };\n}\n\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { changeServiceField, addService, clearServiceFields, changeFilter, setError } from '../actions/actionCreators';\n\nfunction ServiceAdd() {\n\tconst {id, name, price, error, isEdit} = useSelector(state => state.serviceAdd);\n\tconst dispatch = useDispatch();\n\n\tconst handleChange = evt => {\n\t\tconst { name, value } = evt.target;\n\t\tdispatch(changeServiceField(name, value));\n\t}\n\n\tconst handleSubmit = evt => {\n\t\tevt.preventDefault();\n\t\tif (name && price && !isNaN(Number(price))) {\n\t\t\tdispatch(addService(id, name, price));\n\t\t\tdispatch(clearServiceFields());\n\t\t\tdispatch(changeFilter(''));\n\t\t} else {\n\t\t\tdispatch(setError('Введите корректные данные'));\n\t\t}\n\t}\n\n\tconst handleReset = () => {\n\t\tdispatch(clearServiceFields());\t\t\n\t}\n\n\treturn (\n\t\t<form onSubmit={handleSubmit} onReset={handleReset}>\n\t\t\t<input name=\"name\" onChange={handleChange} value={name} />\n\t\t\t<input name=\"price\" onChange={handleChange} value={price} />\n\t\t\t<button type=\"submit\">Save</button>\n\t\t\t{isEdit && <button type=\"reset\">Cancel</button>}\n\t\t\t{error && <p className=\"App-error\">{error}</p>}\n\t\t</form>\n\t);\n}\n\nexport default ServiceAdd;\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { filterServices, changeFilter } from '../actions/actionCreators';\n\nfunction ServiceFilter() {\n\tconst filter = useSelector(state => state.serviceFilter);\n\tconst dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(filterServices(filter));\n  }, [filter, dispatch]);\n\n\tconst handleChange = evt => {\n\t\tdispatch(changeFilter(evt.target.value));\n\t}\n\n\treturn (\n\t\t<label className=\"ServiceFilter\">\n      Filter\n\t\t\t<input name=\"filter\" onChange={handleChange} value={filter} />\n\t\t</label>\n\t);\n}\n\nexport default ServiceFilter;","import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux';\nimport { editService, removeService, clearServiceFields, setError } from '../actions/actionCreators';\n\nfunction ServiceList() {\n  const items = useSelector(state => state.serviceList);\n  const isEdit = useSelector(state => state.serviceAdd.isEdit);\n  const dispatch = useDispatch();\n\n  const handleEdit = (id, name, price) => {\n    if (isEdit) {\n      dispatch(setError('Завершите редактирование текущей записи'));\n    } else {\n      dispatch(editService(id, name, price));\n    }\n  }\n\n  const handleRemove = id => {\n    if (isEdit) {\n      dispatch(setError('Завершите редактирование текущей записи'));\n    } else {\n      dispatch(removeService(id));\n      dispatch(clearServiceFields());\n    }\n  }\n\n  return (\n    <ul>\n      {items.filter(({ isVisible }) => isVisible).map(({ id, name, price }) => (\n        <li key={id}>\n          {name} {price}\n          <button onClick={() => handleEdit(id, name, price)}>&#x270E;</button>  \n          <button onClick={() => handleRemove(id)}>✕</button>\n        </li>\n      ))}\n    </ul>\n  )\n}\n\nexport default ServiceList;\n","import React from 'react';\nimport './App.css';\nimport ServiceAdd from './components/ServiceAdd';\nimport ServiceFilter from './components/ServiceFilter';\nimport ServiceList from './components/ServiceList';\n\nfunction App() {\n  return (\n    <>\n      <ServiceAdd />\n      <ServiceFilter />\n      <ServiceList />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import nanoid from 'nanoid';\nimport { ADD_SERVICE, REMOVE_SERVICE, FILTER_SERVICES } from '../actions/actionTypes';\n\nconst initialState = [\n  {id: nanoid(), name: 'Замена стекла', price: 21000, isVisible: true },\n  {id: nanoid(), name: 'Замена дисплея', price: 25000, isVisible: true }\n];\n\nexport default function serviceListReducer(state = initialState, action) { \n  switch (action.type) {\n    case ADD_SERVICE:\n      const { id, name, price } = action.payload; \n      return id \n        ? state.map(item => item.id === id ? { id, name, price: Number(price), isVisible: true } : item) \n        : [...state, { id: nanoid(), name, price: Number(price), isVisible: true }];\n    case REMOVE_SERVICE: \n      return state.filter(service => service.id !== action.payload.id);\n    case FILTER_SERVICES:\n      const { filter } = action.payload;\n      return state.map(item => ({ ...item, isVisible: item.name.toLowerCase().includes(filter) }));\n    default:\n      return state;\n  }\n}\n","import { CHANGE_SERVICE_FIELD, CLEAR_SERVICE_FIELDS, EDIT_SERVICE, SET_ERROR } from '../actions/actionTypes';\n\nconst initialState = {\n  id: '',\n  name: '',\n  price: '',\n  error: '',\n  isEdit: false\n};\n\nexport default function serviceAddReducer(state = initialState, action) {\n  switch (action.type) {\n    case CHANGE_SERVICE_FIELD:\n      const { name, value } = action.payload;\n      return { ...state, [name]: value };\n    case CLEAR_SERVICE_FIELDS:\n      return initialState;\n    case EDIT_SERVICE:\n      return { ...action.payload, price: String(action.payload.price), error: '', isEdit: true };\n    case SET_ERROR:\n      const { error } = action.payload\n      return { ...state, error };\n    default:\n      return state;\n  }\n}\n","import { CHANGE_FILTER } from '../actions/actionTypes';\n\nconst initialState = '';\n\nexport default function serviceFilterReducer(state = initialState, action) {\n  switch (action.type) {\n    case CHANGE_FILTER:\n      const { filter } = action.payload;\n      return filter.toLowerCase();\n    default:\n      return state;\n  }\n}","import { createStore, combineReducers } from \"redux\";\nimport serviceListReducer from '../reducers/serviceList';\nimport serviceAddReducer from '../reducers/serviceAdd';\nimport serviceFilterReducer from '../reducers/serviceFilter';\n\nconst reducer = combineReducers({\n  serviceList: serviceListReducer,\n  serviceAdd: serviceAddReducer,\n  serviceFilter: serviceFilterReducer\n});\n\nconst store = createStore(\n  reducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\n);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\nimport {Provider} from 'react-redux';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}